require("dotenv").config();

const { Telegraf, Format } = require("telegraf");
const { message } = require("telegraf/filters");
const cron = require("node-cron");
const { getSizePullRequests, getOpenPullRequests } = require("./bitbucket");
const { readLastCount, writeLastCount } = require("./jsonWork");

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

const bot = new Telegraf(BOT_TOKEN);

let size = readLastCount()["lastCount"] ?? 0;

bot.command("start", async (ctx) => {
  await ctx.reply(`Hello ${ctx.state.role}`);
});

async function taskExecute() {
  const actualSize = await getSizePullRequests();
  try {
    if (actualSize > size) {
      try {
        const msg =
          "üî• –£ –≤–∞—Å –µ—Å—Ç—å - " +
          Format.bold(String(size)) +
          " Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN:\n";
        console.log(msg);
        // await bot.telegram.sendMessage(CHAT_ID, msg, {
        //   parse_mode: "Markdown",
        // });
      } catch {
        await bot.context.reply(
          "‚ùó –í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –±–æ—Ç—É, –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç –≤ –õ–°!!!"
        );
      }

      const openPullRequests = await getOpenPullRequests();
      for (const request of openPullRequests) {
        const msg =
          "üîπ –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " +
          Format.bold(request.author) +
          "\n" +
          "üîπ –ò–º—è –≤–µ—Ç–∫–∏:  " +
          request.title.replace("_", " ") +
          "\n" +
          "–°–æ—Å—Ç–æ—è–Ω–∏–µ:  " +
          Format.code(request.state) +
          "\n" +
          "üëâ –ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:  " +
          Format.bold(String(request.count)) +
          "\n" +
          "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " +
          Format.bold(String(request.comments)) +
          "\n" +
          "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è): " +
          request.link;
        console.log(msg);
        // await bot.telegram.sendMessage(CHAT_ID, msg, {
        //   parse_mode: "Markdown",
        // });
      }

      size = actualSize;
      writeLastCount("lastCount", size);
    } else {
      size = actualSize;
      writeLastCount("lastCount", size);
    }
  } catch (error) {
    console.error(error);
    await bot.context.reply(
      "‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!"
    );
  }
}

async function startCronJob() {
  // every two minutes
  // cron.schedule("*/2 * * * *", taskExecute);
  taskExecute();
}

// bot.launch();
startCronJob();
