require("dotenv").config();

const { Telegraf } = require("telegraf");
const { message } = require("telegraf/filters");
const cron = require("node-cron");
const { getSizePullRequests } = require("./bitbucket");
const { readLastCount, writeLastCount } = require("./jsonWork");

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const bot = new Telegraf(BOT_TOKEN);

let size = readLastCount()["lastCount"] ?? 0;

bot.command("start", async (ctx) => {
  await ctx.reply(`Hello ${ctx.state.role}`);
});

async function taskExecute() {
  const actualSize = await getSizePullRequests();
  try {
    if (actualSize > size) {
      //     try:
      //     msg = text("üî• –£ –≤–∞—Å –µ—Å—Ç—å - " + bold(str(size)) + " Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN:\n")
      //     await bot.send_message("id –≥—Ä—É–ø–ø—ã", msg, parse_mode=ParseMode.MARKDOWN)
      // except:
      //     await message.reply("‚ùó –í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –±–æ—Ç—É, –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç –≤ –õ–°!!!")
      // for request in bitBacketUtils.get_open_pull_requests():
      //     mess = text("üîπ –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " + bold(request["–ò–º—è –∞–≤—Ç–æ—Ä–∞"]) + "\n"
      //                 "üîπ –ò–º—è –≤–µ—Ç–∫–∏:  " + request["Commit branch"].replace("_", " ") + "\n"
      //                 "–°–æ—Å—Ç–æ—è–Ω–∏–µ:  " + code(request["–°–æ—Å—Ç–æ—è–Ω–∏–µ"]) + "\n"
      //                 "–†–æ–ª—å:  " + code(request["–†–æ–ª—å"]) + "\n"
      //                 "üëâ –ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:  " + bold(str(request["–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"])) + "\n"
      //                 "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " + bold(str(request["–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])) + "\n"
      //                 "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è): ", request["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è)"])
      //     await bot.send_message("id –≥—Ä—É–ø–ø—ã", mess, parse_mode=ParseMode.MARKDOWN)
      // print("Wow " + str(size) + " " + str(size_2))
      size = actualSize;
      writeLastCount("lastCount", size);
    } else {
      size = actualSize;
      writeLastCount("lastCount", size);
    }
  } catch (error) {
    console.error(error);
    await bot.context.reply(
      "‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!"
    );
  }
}

async function startCronJob() {
  // every two minutes
  // cron.schedule("*/2 * * * *", taskExecute);
  taskExecute();
}

// bot.launch();
startCronJob();
